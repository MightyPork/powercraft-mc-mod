modifier class name<Generic> extends super<Generic> implements A<Generic>, B<Generic> {

	modifier type<Generic> name;
	modifier type<Generic> name = equalment;

	modifier <Generic> classname(modifier paramType<Generic> paramName){}

	modifier abstract <Generic> type<Generic> funcname(modifier paramType<Generic> [paramName]);
	modifier <Generic> type<Generic> funcname(modifier paramType<Generic> paramName){}

}

synchronized("String"){
	
}

equalment:
0
a = equalment
new String[]{}


keywords:

abstract asm break catch class continue do else enum extends 
false final for if implements instanceof interface native 
new null private protected public return static super 
synchronized this throw true try while
