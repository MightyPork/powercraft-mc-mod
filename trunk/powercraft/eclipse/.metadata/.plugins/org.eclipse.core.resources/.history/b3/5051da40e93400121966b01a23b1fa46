package powercraft.light;

import java.util.Random;

import net.minecraft.src.Block;
import net.minecraft.src.CreativeTabs;
import net.minecraft.src.EntityPlayer;
import net.minecraft.src.IBlockAccess;
import net.minecraft.src.ItemBlock;
import net.minecraft.src.ItemStack;
import net.minecraft.src.Material;
import net.minecraft.src.MathHelper;
import net.minecraft.src.TileEntity;
import net.minecraft.src.World;
import powercraft.core.PC_Block;
import powercraft.core.PC_Utils;

public class PCli_BlockMirrow extends PC_Block {

	public PCli_BlockMirrow(int id) {
		super(id, Material.glass);
		float f = 0.4F;
		float f1 = 1.0F;
		setBlockBounds(0.5F - f, 0.1F, 0.5F - f, 0.5F + f, f1 - 0.1F, 0.5F + f);
		setHardness(1.0F);
		setResistance(4.0F);
		setStepSound(Block.soundStoneFootstep);
		setCreativeTab(CreativeTabs.tabDecorations);
	}

	@Override
	public String getDefaultName() {
		return "Mirrow";
	}

	@Override
	public TileEntity createNewTileEntity(World world) {
		return new PCli_TileEntityMirrow();
	}
	
	@Override
	public boolean renderAsNormalBlock() {
		return false;
	}

	@Override
	public boolean getBlocksMovement(IBlockAccess par1IBlockAccess, int par2, int par3, int i) {
		return true;
	}

	@Override
	public boolean isOpaqueCube() {
		return false;
	}

	@Override
	public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer player, int par6, float par7, float par8, float par9) {
		ItemStack ihold = player.getCurrentEquippedItem();
		if (ihold != null) {
			if (ihold.itemID == PC_Utils.getPCObjectIDByName("PCco_BlockPowerCrystal")) {

				PCli_TileEntityMirrow teo = PC_Utils.getTE(world, i, j, k, blockID);
				if (teo != null) {
					teo.setMirrorColor(ihold.getItemDamage());
				}

				return true;
			}

			if (ihold.getItem() instanceof ItemBlock && ihold.itemID != blockID) {
				Block bhold = Block.blocksList[ihold.getItem().shiftedIndex];
				return false;
			}
		}

		if (isMirror(world, i, j, k)) {
			int m = MathHelper.floor_double((((player.rotationYaw + 180F) * 16F) / 360F) + 0.5D) & 0xf;
			world.setBlockMetadataWithNotify(i, j, k, m);
		} 
		return true;
	}

	/**
	 * Get tile entity at position in world
	 * 
	 * @param iblockaccess
	 * @param x
	 * @param y
	 * @param z
	 * @return the tile entity
	 */
	public static PCma_TileEntityOptical getTE(IBlockAccess iblockaccess, int x, int y, int z) {
		TileEntity te = iblockaccess.getBlockTileEntity(x, y, z);
		if (te == null) {
			return null;
		}
		PCma_TileEntityOptical tem = (PCma_TileEntityOptical) te;

		return tem;
	}

	/**
	 * Check if prism's side is active (with glass pane)
	 * 
	 * @param iblockaccess
	 * @param x
	 * @param y
	 * @param z
	 * @param side
	 * @return has glass panel
	 */
	public static boolean isGlassPanelOnSide(IBlockAccess iblockaccess, int x, int y, int z, int side) {

		PCma_TileEntityOptical teo = getTE(iblockaccess, x, y, z);

		if (teo == null) {
			return false;
		}

		return getTE(iblockaccess, x, y, z).getPrismSide(side);
	}

	/**
	 * Check if device is mirror
	 * 
	 * @param iblockaccess
	 * @param x
	 * @param y
	 * @param z
	 * @return is mirror
	 */
	public static boolean isMirror(IBlockAccess iblockaccess, int x, int y, int z) {

		PCma_TileEntityOptical teo = getTE(iblockaccess, x, y, z);

		return teo != null && teo.isMirror();

	}

	/**
	 * Get mirror color
	 * 
	 * @param iblockaccess
	 * @param x
	 * @param y
	 * @param z
	 * @return the color index (crystal meta)
	 */
	public static int getMirrorColor(IBlockAccess iblockaccess, int x, int y, int z) {

		PCma_TileEntityOptical teo = getTE(iblockaccess, x, y, z);

		if (teo == null) {
			return 0;
		}
		return teo.getMirrorColor();

	}

	/**
	 * Check if device is prism
	 * 
	 * @param iblockaccess
	 * @param x
	 * @param y
	 * @param z
	 * @return is prism
	 */
	public static boolean isPrism(IBlockAccess iblockaccess, int x, int y, int z) {
		PCma_TileEntityOptical teo = getTE(iblockaccess, x, y, z);

		return teo != null && teo.isPrism();
	}

	@Override
	public int getRenderColor(int i) {
		if (i == 0) {
			return 0x999999;
		}
		return 0xffffcc;
	}

	@Override
	public int colorMultiplier(IBlockAccess iblockaccess, int i, int j, int k) {
		if (isMirror(iblockaccess, i, j, k)) {
			return 0x999999;
		}
		return 0xffffcc;
	}
	
}
