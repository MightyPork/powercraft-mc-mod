package powercraft.light;

import net.minecraft.src.Block;
import net.minecraft.src.CreativeTabs;
import net.minecraft.src.EntityPlayer;
import net.minecraft.src.IBlockAccess;
import net.minecraft.src.ItemBlock;
import net.minecraft.src.ItemStack;
import net.minecraft.src.Material;
import net.minecraft.src.MathHelper;
import net.minecraft.src.TileEntity;
import net.minecraft.src.World;
import powercraft.core.PC_BeamTracer;
import powercraft.core.PC_BeamTracer.result;
import powercraft.core.PC_Block;
import powercraft.core.PC_Color;
import powercraft.core.PC_CoordI;
import powercraft.core.PC_IBeamSpecialHandling;
import powercraft.core.PC_IBlockRenderer;
import powercraft.core.PC_Renderer;
import powercraft.core.PC_Utils;

public class PCli_BlockPrism extends PC_Block implements
		PC_IBeamSpecialHandling, PC_IBlockRenderer {

	public PCli_BlockPrism(int id) {
		super(id, Material.glass);
		float f = 0.4F;
		float f1 = 1.0F;
		setBlockBounds(0.5F - f, 0.1F, 0.5F - f, 0.5F + f, f1 - 0.1F, 0.5F + f);
		setHardness(1.0F);
		setResistance(4.0F);
		setStepSound(Block.soundStoneFootstep);
		setCreativeTab(CreativeTabs.tabDecorations);
	}

	@Override
	public String getDefaultName() {
		return "Prism";
	}
	
	@Override
	public TileEntity createNewTileEntity(World world) {
		return new PCli_TileEntityPrism();
	}
	
	@Override
	public boolean renderAsNormalBlock() {
		return false;
	}

	@Override
	public boolean getBlocksMovement(IBlockAccess par1IBlockAccess, int par2, int par3, int i) {
		return true;
	}

	@Override
	public boolean isOpaqueCube() {
		return false;
	}
	
	@Override
	public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer player, int par6, float par7, float par8, float par9) {
		ItemStack ihold = player.getCurrentEquippedItem();
		if (ihold != null) {
			if (ihold.itemID == PC_Utils.getPCObjectIDByName("PCco_BlockPowerCrystal")) {

				PCli_TileEntityMirrow teo = PC_Utils.getTE(world, i, j, k, blockID);
				if (teo != null) {
					teo.setMirrorColor(ihold.getItemDamage());
				}

				return true;
			}

			if (ihold.getItem() instanceof ItemBlock && ihold.itemID != blockID) {
				Block bhold = Block.blocksList[ihold.getItem().shiftedIndex];
				return false;
			}
		}

		int m = MathHelper.floor_double((((player.rotationYaw + 180F) * 16F) / 360F) + 0.5D) & 0xf;
		world.setBlockMetadataWithNotify(i, j, k, m);

		return true;
	}
	
	@Override
	public void breakBlock(World world, int i, int j, int k, int par5, int par6) {
		if (!PC_Utils.isCreative()) {
			if (isMirror(world, i, j, k)) {
				dropBlockAsItem_do(world, i, j, k, new ItemStack(mod_PCmachines.optical, 1, 0));
			} else {
				dropBlockAsItem_do(world, i, j, k, new ItemStack(mod_PCmachines.optical, 1, 1));
				PCma_TileEntityOptical teo = getTE(world, i, j, k);
				if (teo != null) {
					for (int q = 0; q <= 9; q++) {
						if (teo.getPrismSide(q)) {
							dropBlockAsItem_do(world, i, j, k, new ItemStack(Block.thinGlass, 1));
						}
					}
				}
			}
		}
		super.breakBlock(world, i, j, k, par5, par6);
	}
	
	/**
	 * Check if prism's side is active (with glass pane)
	 * 
	 * @param iblockaccess
	 * @param x
	 * @param y
	 * @param z
	 * @param side
	 * @return has glass panel
	 */
	public static boolean isGlassPanelOnSide(IBlockAccess iblockaccess, int x, int y, int z, int side) {

		PCma_TileEntityOptical teo = getTE(iblockaccess, x, y, z);

		if (teo == null) {
			return false;
		}

		return getTE(iblockaccess, x, y, z).getPrismSide(side);
	}
	
	@Override
	public int getRenderColor(int i) {
		return 0xffffcc;
	}

	@Override
	public int colorMultiplier(IBlockAccess iblockaccess, int i, int j, int k) {
		return 0xffffcc;
	}
	
	@Override
	public void renderInventoryBlock(Block block, int metadata, int modelID, Object renderer) {
		Block ice = Block.ice;
		float px = 0.0625F;
		ice.setBlockBounds(3 * px, 3 * px, 3 * px, 12 * px, 12 * px, 12 * px);
		PC_Renderer.renderInvBox(renderer, ice, 0);
		ice.setBlockBounds(4 * px, 4 * px, 2 * px, 11 * px, 11 * px, 13 * px);
		PC_Renderer.renderInvBox(renderer, ice, 0);
		ice.setBlockBounds(2 * px, 4 * px, 4 * px, 13 * px, 11 * px, 11 * px);
		PC_Renderer.renderInvBox(renderer, ice, 0);
		ice.setBlockBounds(4 * px, 2 * px, 4 * px, 11 * px, 13 * px, 11 * px);
		PC_Renderer.renderInvBox(renderer, ice, 0);
		ice.setBlockBounds(0, 0, 0, 1, 1, 1);
	}

	@Override
	public void renderWorldBlock(IBlockAccess world, int x, int y, int z,Block block, int modelId, Object renderer) {
		
	}

	@Override
	public result onHitByBeamTracer(PC_BeamTracer beamTracer, PC_CoordI cnt, PC_CoordI move, PC_Color color, float strength, int distanceToMove) {
		// TODO Auto-generated method stub
		return null;
	}

}
