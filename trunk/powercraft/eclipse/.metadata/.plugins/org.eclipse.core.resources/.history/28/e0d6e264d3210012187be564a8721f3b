package powercraft.core;

import net.minecraft.src.Block;
import net.minecraft.src.IBlockAccess;
import net.minecraft.src.RenderBlocks;
import net.minecraft.src.RenderEngine;
import net.minecraft.src.Tessellator;

import org.lwjgl.opengl.GL11;

import cpw.mods.fml.client.registry.ISimpleBlockRenderingHandler;
import cpw.mods.fml.client.registry.RenderingRegistry;

public class PC_ClientRenderer extends PC_Renderer implements ISimpleBlockRenderingHandler {
	
	public PC_ClientRenderer(boolean render3d){
		super(render3d);
		if(render3d)
			render3dId = RenderingRegistry.instance().getNextAvailableRenderId();
		else
			render2dId = RenderingRegistry.instance().getNextAvailableRenderId();
	}
	
	@Override
	public void renderInventoryBlock(Block block, int metadata, int modelID, RenderBlocks renderer) {
		if(block instanceof PC_IBlockRenderer){
			((PC_IBlockRenderer) block).renderInventoryBlock(block, metadata, modelID, renderer);
		}else if(block instanceof PC_IRotatedBox){
			iRenderInvBlockRotatedBox(block, metadata, modelID, renderer);
		}
	}

	@Override
	public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z, Block block, int modelId, RenderBlocks renderer) {
		if(block instanceof PC_IBlockRenderer){
			((PC_IBlockRenderer) block).renderWorldBlock(world, x, y, z, block, modelId, renderer);
		}else if(block instanceof PC_IRotatedBox){
			iRenderBlockRotatedBox(world, x, y, z, block, modelId, renderer);
		}else
			return false;
		return true;
	}

	@Override
	public boolean shouldRender3DInInventory() {
		return render3d;
	}

	@Override
	public int getRenderId() {
		if(render3d)
			return render3dId;
		return render2dId;
	}
	
	@Override
	protected void iTessellatorDraw(){
		Tessellator.instance.draw();
	};
	
	@Override
	protected void iTessellatorStartDrawingQuads(){
		Tessellator.instance.startDrawingQuads();
	};
	
	private RenderEngine getRenderEngine(){
		return PC_ClientUtils.mc().renderEngine;
	}
	
	@Override
	protected void iBindTexture(String texture){
		RenderEngine re = getRenderEngine();
		re.bindTexture(re.getTexture(texture));
	};
	
	@Override
	protected void iRenderStandardBlock(Object renderer, Block block, int x, int y, int z){
		((RenderBlocks)renderer).func_83018_a(block);
		((RenderBlocks)renderer).renderStandardBlock(block, x, y, z);
		((RenderBlocks)renderer).func_83017_b();
	};

	protected void iRenderInvBox(Object renderer, Block block, int metadata){
		Tessellator tessellator = Tessellator.instance;
		RenderBlocks renderblocks = (RenderBlocks)renderer;
		
		int[] textures = new int[6];
		if (block instanceof PC_ISpecialInventoryTextures) {
			for (int a = 0; a < 6; a++) {
				textures[a] = ((PC_ISpecialInventoryTextures) block).getInvTexture(a, metadata);
			}
		} else {
			for (int a = 0; a < 6; a++) {
				textures[a] = block.getBlockTextureFromSideAndMetadata(a, metadata);
			}
		}
		
		block.setBlockBoundsForItemRender();
		((RenderBlocks)renderer).func_83018_a(block);
		GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
		tessellator.startDrawingQuads();
		tessellator.setNormal(0.0F, -1F, 0.0F);
		renderblocks.renderBottomFace(block, 0.0D, 0.0D, 0.0D, textures[0]);
		tessellator.draw();
		tessellator.startDrawingQuads();
		tessellator.setNormal(0.0F, 1.0F, 0.0F);
		renderblocks.renderTopFace(block, 0.0D, 0.0D, 0.0D, textures[1]);
		tessellator.draw();
		tessellator.startDrawingQuads();
		tessellator.setNormal(0.0F, 0.0F, -1F);
		renderblocks.renderEastFace(block, 0.0D, 0.0D, 0.0D, textures[2]);
		tessellator.draw();
		tessellator.startDrawingQuads();
		tessellator.setNormal(0.0F, 0.0F, 1.0F);
		renderblocks.renderWestFace(block, 0.0D, 0.0D, 0.0D, textures[3]);
		tessellator.draw();
		tessellator.startDrawingQuads();
		tessellator.setNormal(-1F, 0.0F, 0.0F);
		renderblocks.renderNorthFace(block, 0.0D, 0.0D, 0.0D, textures[4]);
		tessellator.draw();
		tessellator.startDrawingQuads();
		tessellator.setNormal(1.0F, 0.0F, 0.0F);
		renderblocks.renderSouthFace(block, 0.0D, 0.0D, 0.0D, textures[5]);
		tessellator.draw();
		GL11.glTranslatef(0.5F, 0.5F, 0.5F);
		((RenderBlocks)renderer).func_83017_b();
	}
	
	@Override
	protected void iRenderBlockRotatedBox(IBlockAccess world, int x, int y, int z, Block block, int modelId, Object renderer){
		Tessellator tessellator = Tessellator.instance;
		int metaAt = world.getBlockMetadata(x, y, z);

		if (block instanceof PC_IRotatedBox) {

			tessellator.draw();
			tessellator.startDrawingQuads();

			boolean swapped = swapTerrain(block);

			block.setBlockBoundsBasedOnState(world, x, y, z);
			((RenderBlocks)renderer).func_83018_a(block);
			int l = ((PC_IRotatedBox) block).getRotation(metaAt);
			int i1 = l;
			((RenderBlocks)renderer).renderStandardBlock(block, x, y, z);

			tessellator.setBrightness(block.getMixedBrightnessForBlock(world, x, y, z));
			tessellator.setColorOpaque_F(1.0F, 1.0F, 1.0F);
			tessellator.setNormal(0.0F, 1F, 0.0F);
			int k1 = block.getBlockTexture(world, x, y, z, 1);
			int l1 = (k1 & 0xf) << 4;
			int i2 = k1 & 0xf0;
			double d5 = l1 / 256F;
			double d6 = (l1 + 15.99F) / 256F;
			double d7 = i2 / 256F;
			double d8 = (i2 + 15.99F) / 256F;
			double d9 = (block.func_83010_y());
			double d10 = x + block.func_83007_w();
			double d11 = x + block.func_83007_w();
			double d12 = x + block.func_83009_v();
			double d13 = x + block.func_83009_v();
			double d14 = z + block.func_83005_z();
			double d15 = z + block.func_83006_A();
			double d16 = z + block.func_83006_A();
			double d17 = z + block.func_83005_z();
			double d18 = y + d9;
			if (i1 == 2) {
				d10 = d11 = x + block.func_83009_v();
				d12 = d13 = x + block.func_83007_w();
				d14 = d17 = z + block.func_83006_A();
				d15 = d16 = z + block.func_83005_z();
			} else if (i1 == 3) {
				d10 = d13 = x + block.func_83009_v();
				d11 = d12 = x + block.func_83007_w();
				d14 = d15 = z + block.func_83005_z();
				d16 = d17 = z + block.func_83006_A();
			} else if (i1 == 1) {
				d10 = d13 = x + block.func_83007_w();
				d11 = d12 = x + block.func_83009_v();
				d14 = d15 = z + block.func_83006_A();
				d16 = d17 = z + block.func_83005_z();
			}

			tessellator.addVertexWithUV(d13, d18, d17, d5, d7);
			tessellator.addVertexWithUV(d12, d18, d16, d5, d8);
			tessellator.addVertexWithUV(d11, d18, d15, d6, d8);
			tessellator.addVertexWithUV(d10, d18, d14, d6, d7);

			tessellator.draw();
			tessellator.startDrawingQuads();
			((RenderBlocks)renderer).func_83017_b();
			resetTerrain(swapped);

		}

	}
	
	@Override
	protected void iRenderInvBlockRotatedBox(Block block, int metadata, int modelID, Object renderer){
		RenderBlocks renderblocks = (RenderBlocks)renderer;
		Tessellator tessellator = Tessellator.instance;

		int metadata = PC_Utils.getMD(world, x, y, z);
		
		if (block instanceof PC_IRotatedBox) {

			boolean swapped = swapTerrain(block);

			boolean renderOnSide = ((PC_IRotatedBox) block).renderItemHorizontal();

			if (renderOnSide) {
				block.setBlockBoundsForItemRender();
			} else {
				block.setBlockBounds(-0.1F, -0.1F, 0.4F, 1.1F, 1.1F, 0.6F);
			}
			
			((RenderBlocks)renderer).func_83018_a(block);
			GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
			tessellator.draw();
			tessellator.startDrawingQuads();
			tessellator.setNormal(0.0F, -1F, 0.0F);
			renderblocks.renderBottomFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSideAndMetadata(renderOnSide ? 0 : 0, metadata));
			tessellator.draw();
			tessellator.startDrawingQuads();
			tessellator.setNormal(0.0F, 1.0F, 0.0F);
			renderblocks.renderTopFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSideAndMetadata(renderOnSide ? 1 : 0, metadata));
			tessellator.draw();
			tessellator.startDrawingQuads();
			tessellator.setNormal(0.0F, 0.0F, -1F);
			renderblocks.renderEastFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSideAndMetadata(renderOnSide ? 2 : 0, metadata));
			tessellator.draw();
			tessellator.startDrawingQuads();
			tessellator.setNormal(0.0F, 0.0F, 1.0F);
			renderblocks.renderWestFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSideAndMetadata(renderOnSide ? 3 : 1, metadata));
			tessellator.draw();
			tessellator.startDrawingQuads();
			tessellator.setNormal(-1F, 0.0F, 0.0F);
			renderblocks.renderNorthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSideAndMetadata(renderOnSide ? 4 : 0, metadata));
			tessellator.draw();
			tessellator.startDrawingQuads();
			tessellator.setNormal(1.0F, 0.0F, 0.0F);
			renderblocks.renderSouthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSideAndMetadata(renderOnSide ? 5 : 0, metadata));
			tessellator.draw();
			tessellator.startDrawingQuads();
			GL11.glTranslatef(0.5F, 0.5F, 0.5F);
			((RenderBlocks)renderer).func_83017_b();
			resetTerrain(swapped);

			return;
		}
	}
	
	/**
	 * Use texture file as terrain.png
	 * 
	 * @param filename name of the used texture file (png)
	 */
	public static void swapTerrain(String filename) {
		RenderEngine renderengine = PC_ClientUtils.mc().renderEngine;
		renderengine.bindTexture(renderengine.getTexture(filename));
	}

	/**
	 * If block implements ISwapTerrain, set used terrain texture to the one
	 * from this block
	 * 
	 * @param block the block to render
	 * @return true if terrain was swapped -> call resetTerrain() to re-enable
	 *         original terrain.png
	 */
	public static boolean swapTerrain(Block block) {
		RenderEngine renderengine = PC_ClientUtils.mc().renderEngine;
		if (block instanceof PC_ISwapTerrain) {
			renderengine.bindTexture(renderengine.getTexture(((PC_ISwapTerrain) block).getTerrainFile()));
			return true;
		}
		return false;
	}

	/**
	 * Reset swapped terrain - set the original terrain file back.
	 * 
	 * @param do_it false = do nothing
	 */
	public static void resetTerrain(Boolean do_it) {
		RenderEngine renderengine = PC_ClientUtils.mc().renderEngine;
		renderengine.bindTexture(renderengine.getTexture("/terrain.png"));
	}
	
}
