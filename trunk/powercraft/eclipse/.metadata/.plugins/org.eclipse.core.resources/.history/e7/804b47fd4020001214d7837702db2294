package powercraft.core;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.minecraftforge.common.Configuration;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModContainer;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;

public abstract class PC_Module {

	private static HashMap<String, PC_Module> modules = new HashMap<String, PC_Module>();
	private File cfgdir=null;
	private Configuration config=null;
	private PC_Proxy proxy;
	
	public ModContainer getModContainer(){
		List<ModContainer> modContainers = Loader.instance().getActiveModList();
		for(ModContainer modContainer:modContainers){
			if(modContainer.matches(this))
				return modContainer;
		}
		return null;
	}
	
	public ModMetadata getModMetadata(){
		return getModContainer().getMetadata();
	}

	public String getName(){
		return getModMetadata().name;
	}
	
	public String getNameWithoutPowerCraft(){
		String name=getName();
		return name.substring(name.indexOf('-')+1);
	}
	
	public String getVersion() {
		return getModMetadata().version;
	}
	
	public String getTextureFile(){
		return "/"+getName()+"/";
	}
	
	public String getTerrainFile() {
		return getTextureFile()+"tiles.png";
	}
	
	protected void registerModule(){
		modules.put(getName().toLowerCase(), this);
		
		PC_Utils.loadLanguage(this);
		
		ModMetadata mm = getModMetadata();
		mm.autogenerated = false;
		mm.authorList = new ArrayList<String>();
		mm.authorList.add("XOR");
		mm.authorList.add("Rapus");
		mm.credits = "MightyPork, RxD";
		mm.description = "";
		mm.logoFile = "";
		mm.url = "http://powercrafting.net/";
		if(this!=getModule("Core")){
			mm.parent = "PowerCraft-Core";
			mm.parentMod = getModule("Core").getModContainer();
		}
		
	}
	
	public static PC_Module getModule(String module){
		module = module.toLowerCase();
		if(modules.containsKey(module))
			return modules.get(module);
		module = "powercraft-"+module;
		if(modules.containsKey(module))
			return modules.get(module);
		return null;
	}
	
	protected void setCfgdir(File cfgdir){
		this.cfgdir = cfgdir;
	}
	
	public Configuration getConfig(){
		if(config==null){
			config = new Configuration(cfgdir);
			config.load();
		}
		return config;
	}

	protected void preInit(FMLPreInitializationEvent event, PC_Proxy proxy){
		this.proxy = proxy;
		registerModule();
		setCfgdir(event.getSuggestedConfigurationFile());
		initProperties(getConfig());
		proxy.registerRenderer();
		List<String> textures = loadTextureFiles(new ArrayList<String>());
		if(textures!=null && textures.size()>0)
			PC_Utils.registerTextureFiles(textures.toArray(new String[0]));
		initLanguage();
	}
	
	protected abstract void initProperties(Configuration config);
	protected abstract List<String> loadTextureFiles(List<String> textures);
	protected abstract void initLanguage();
	
	protected void init(){
		proxy.init();
		initBlocks();
		initItems();
		initRecipes();
		PC_Utils.registerGresArray(proxy.registerGuis());
		PC_PacketHandler.registerPackethandlers(proxy.registerPackethandlers());
	}
	
	protected abstract void initBlocks();
	protected abstract void initItems();
	protected abstract void initRecipes();
	
	protected void postInit(){
		PC_Utils.saveLanguage(this);
		getConfig().save();
	}
	
	public static boolean isUpdateAvailable() {
		return true;
	}

	public static String getPowerCraftFile() {
		return "/PowerCraft/";
	}
	
}
