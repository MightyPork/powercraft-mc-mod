package powercraft.light;

import java.util.List;

import net.minecraft.src.CreativeTabs;
import net.minecraft.src.EntityPlayer;
import net.minecraft.src.InventoryCrafting;
import net.minecraft.src.ItemStack;
import net.minecraft.src.NBTTagCompound;
import net.minecraft.src.TileEntity;
import net.minecraft.src.World;
import powercraft.core.PC_ActivatorListener;
import powercraft.core.PC_Color;
import powercraft.core.PC_CoordI;
import powercraft.core.PC_IActivatorListener;
import powercraft.core.PC_Item;
import powercraft.core.PC_Utils;

public class PCli_ItemLaserComposition extends PC_Item
{
    public PCli_ItemLaserComposition(int id)
    {
        super(id);
        setMaxStackSize(1);
        setHasSubtypes(false);
        setCreativeTab(CreativeTabs.tabDecorations);
    }

    @Override
    public String[] getDefaultNames()
    {
        return new String[]
                {
                    getItemName(), "Laser Composition",
                    getItemName() + ".kill", "Kill Level %s",
                    getItemName() + ".distance", "Distance Level %s"
                };
    }

    @Override
    public int getMetadata(int i)
    {
        return i;
    }
    
    @Override
    public int getColorFromItemStack(ItemStack itemStack, int pass)
    {
        return getColorForItemStack(itemStack).getHex();
    }

    @Override
    public boolean onItemUse(ItemStack itemstack, EntityPlayer entityplayer, World world, int i, int j, int k, int l, float par8, float par9, float par10)
    {
    	
    	TileEntity te = PC_Utils.getTE(world, i, j, k);
    	
    	if(te instanceof PCli_TileEntityLaser){
    		
    		((PCli_TileEntityLaser)te).setItemStack(itemstack.copy());
    		
    		itemstack.stackSize = 0;
    		
    		return true;
    		
    	}

        return false;
    }
    
	@Override
    public void addInformation(ItemStack itemStack, EntityPlayer player, List list, boolean b)
    {
		NBTTagCompound nbtTagCompound = itemStack.getTagCompound();
        if(nbtTagCompound==null){
        	nbtTagCompound = new NBTTagCompound();
        	itemStack.setTagCompound(nbtTagCompound);
        }
        int levelKill = nbtTagCompound.getInteger("level.kill");
        int levelDistance = nbtTagCompound.getInteger("level.distance");
        
        if (levelKill > 0)
        {
        	list.add(PC_Utils.tr(getItemName() + ".kill.name", ("" + levelKill)));
        }

        if (levelDistance > 0)
        {
        	list.add(PC_Utils.tr(getItemName() + ".distance.name", ("" + levelDistance)));
        }
    }
	
    @Override
	public void doCrafting(ItemStack itemStack, InventoryCrafting inventoryCrafting) {
    	ItemStack is = inventoryCrafting.getStackInRowAndColumn(1, 1);
    	if(is.itemID == PC_Utils.getPCObjectIDByName("PCco_BlockPowerCrystal")){
    		switch(is.getItemDamage()){
    		case 1:
    			itemStack.stackTagCompound = new NBTTagCompound();
    			itemStack.stackTagCompound.setInteger("level.kill", 1);
    		}
    	}
	}

	public static PC_Color getColorForItemStack(ItemStack itemstack)
    {
    	if(itemstack==null){
    		return new PC_Color(1.0f, 1.0f, 1.0f);
    	}

        NBTTagCompound nbtTagCompound = itemstack.getTagCompound();
        if(nbtTagCompound==null){
        	nbtTagCompound = new NBTTagCompound();
        	itemstack.setTagCompound(nbtTagCompound);
        }
        int levelKill = nbtTagCompound.getInteger("level.kill");
        int maxLevel = levelKill;
        if(maxLevel==0){
        	return new PC_Color(1.0f, 1.0f, 1.0f);
        }
        PC_Color c = new PC_Color();
        c.r = levelKill / (float)maxLevel;
        //c.g = 1.0f / maxLevel;
        //c.b = 1.0f / maxLevel;
        return c;
    }
    
	public static int getLengthLimit(ItemStack itemstack) {
		if(itemstack==null)
			return 20;
		NBTTagCompound nbtTagCompound = itemstack.getTagCompound();
		int levelDistance = nbtTagCompound.getInteger("level.distance");
		return 20+levelDistance*10;
	}
	
}
